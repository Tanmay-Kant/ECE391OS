Bug: Error stating ./debug.sh when trying to sudo make from wfh setup

Fix: By running the commands: dos2unix debug.sh and chmod +x debug.sh, the format is converted to UNIX format which fixes the error


Bug: no such instruction found when writing the assembly linkage macro for the exceptions

Fix: By fixing the header files included as well as the ordering of the variables defined similar to the ece391syscall.S file given to us, the error was fixed.



Bug: We kept on receiving a General Protection Fault when initializing the IDT.

Fix: We had to modify the present bit to ensure that the present bit of only the first 20 exceptions, the keyboard and rtc interrupt, and the system call are set to 1 while the remaining IDT entries have their present bit set to 0.

Bug: Bounds error boot loop 

Fix: there was an issue with our initialization of the gdt and we did not pass a pointer to gdt desc to load it in so we had stack corruption errors so we had to redo the gdt initalization with it

Bug: Only our asm volatile test case was working 

Fix: There was an error with how we called the exception handler in our linkage assembly file we re wrote a case for exception errors, errors and for interrupt handling this made us rework how we called the prints and implicitly fixed the problem

Bug: printing multiple characters when pressing a keyboard
Fix: the same way that shift sends a scan code when we released it, we realized that all the other button presses do it as well so we needed to have some kind of bounds to make sure that those reads weren't interpretted as button presses. We checked if the press was less than 0x58 before calling the stuff to print the function

Bug: putc for printing files had strange characters after
Fix: this issue was due to the buffer not being cleared with null bits when we initialized it, at first we had just ran a loop when we initialized the buffer that added null nodes but later when we called read_data it would corrupt the file. So we instead added an if statement and a loop that in the case we reach the end of the file it would then fill the rest of the buffer with null nodes from there.

Bug: There was an issue with initialization of the file system where the values were all way higher for the addresses then they were supposed to be
Fix: we had been calling the function to initialize the file_system after paging which alread formatted some memory this led to the file system getting mapped to the wrong spot, to fix this we did the call before hand to fix any issues with where it mapped to.

Bug: read dentry by name grabbing incorrect dentry values
Fix: we were having a lot of trouble with the pointer aspect of the file system functions and we originally tried dereferencing and accessing values such as file name and file type this led to problems with how the program interpretted it afterwards and it was instead putting the address. We instead opted to use memcpy calls which streamlined the process.

Bug: There was an issue with our enter button not properly exhibiting vertical scroll. 
Fix: The issue was that when we pressed enter along the bottom line, the cursor would simply jump up to the top but the screen wouldn’t properly vertically scroll. 
The problem was that we were not properly setting the screen_x and screen_y values, as well as 2 conditional if statements that determined our location in the buffer. 

Bug: One issue we faced with setting register values and writing to RTC device was with the outb and inb statements. 
Fix: When we were writing our statements, we forgot that the style of code in our class is slightly different than what some other people use, and swapped the 2 inside parameters ( outb(A, B) instead of outb(B, A) ). We weren’t loading values correctly. 

Bug: We faced some short issues with our flag in RTC.
Fix: At first, we wrote while(flag = 1) instead of using the “ ==”, which completely messed up the way our flagging was set and cleared. Then, we accidentally switched the on and off values inside the while loop. 

Bug: One mistake we made was forgetting which direction speed increased for the rate values. 
Fix: We are used to increasing frequencies in Hertz meaning “faster”, but there is a negative correlation with the rate. This led to some issues and misconceptions when we were testing, but we quickly figured out our mistake and reoriented ourselves. 

Bug: For RTC test cases, we were incorrectly looping through our values of frequencies/rates.
Fix: We were not setting the right initial and increment values, but once we realized to start at i = 2 and multiply by a factor of 2 every iteration, we were able to see success. 


