Bug: Error stating ./debug.sh when trying to sudo make from wfh setup

Fix: By running the commands: dos2unix debug.sh and chmod +x debug.sh, the format is converted to UNIX format which fixes the error


Bug: no such instruction found when writing the assembly linkage macro for the exceptions

Fix: By fixing the header files included as well as the ordering of the variables defined similar to the ece391syscall.S file given to us, the error was fixed.



Bug: We kept on receiving a General Protection Fault when initializing the IDT.

Fix: We had to modify the present bit to ensure that the present bit of only the first 20 exceptions, the keyboard and rtc interrupt, and the system call are set to 1 while the remaining IDT entries have their present bit set to 0.

Bug: Bounds error boot loop 

Fix: there was an issue with our initialization of the gdt and we did not pass a pointer to gdt desc to load it in so we had stack corruption errors so we had to redo the gdt initalization with it

Bug: Only our asm volatile test case was working 

Fix: There was an error with how we called the exception handler in our linkage assembly file we re wrote a case for exception errors, errors and for interrupt handling this made us rework how we called the prints and implicitly fixed the problem

Bug: printing multiple characters when pressing a keyboard
Fix: the same way that shift sends a scan code when we released it, we realized that all the other button presses do it as well so we needed to have some kind of bounds to make sure that those reads weren't interpretted as button presses. We checked if the press was less than 0x58 before calling the stuff to print the function

Bug: putc for printing files had strange characters after
Fix: this issue was due to the buffer not being cleared with null bits when we initialized it, at first we had just ran a loop when we initialized the buffer that added null nodes but later when we called read_data it would corrupt the file. So we instead added an if statement and a loop that in the case we reach the end of the file it would then fill the rest of the buffer with null nodes from there.

Bug: There was an issue with initialization of the file system where the values were all way higher for the addresses then they were supposed to be
Fix: we had been calling the function to initialize the file_system after paging which alread formatted some memory this led to the file system getting mapped to the wrong spot, to fix this we did the call before hand to fix any issues with where it mapped to.

Bug: read dentry by name grabbing incorrect dentry values
Fix: we were having a lot of trouble with the pointer aspect of the file system functions and we originally tried dereferencing and accessing values such as file name and file type this led to problems with how the program interpretted it afterwards and it was instead putting the address. We instead opted to use memcpy calls which streamlined the process.

Bug: There was an issue with our enter button not properly exhibiting vertical scroll. 
Fix: The issue was that when we pressed enter along the bottom line, the cursor would simply jump up to the top but the screen wouldn’t properly vertically scroll. 
The problem was that we were not properly setting the screen_x and screen_y values, as well as 2 conditional if statements that determined our location in the buffer. 

Bug: One issue we faced with setting register values and writing to RTC device was with the outb and inb statements. 
Fix: When we were writing our statements, we forgot that the style of code in our class is slightly different than what some other people use, and swapped the 2 inside parameters ( outb(A, B) instead of outb(B, A) ). We weren’t loading values correctly. 

Bug: We faced some short issues with our flag in RTC.
Fix: At first, we wrote while(flag = 1) instead of using the “ ==”, which completely messed up the way our flagging was set and cleared. Then, we accidentally switched the on and off values inside the while loop. 

Bug: One mistake we made was forgetting which direction speed increased for the rate values. 
Fix: We are used to increasing frequencies in Hertz meaning “faster”, but there is a negative correlation with the rate. This led to some issues and misconceptions when we were testing, but we quickly figured out our mistake and reoriented ourselves. 

Bug: For RTC test cases, we were incorrectly looping through our values of frequencies/rates.
Fix: We were not setting the right initial and increment values, but once we realized to start at i = 2 and multiply by a factor of 2 every iteration, we were able to see success. 

Bug: Execute kept pagefaulting as soon as hit the asm volatile code. 
Fix: Our eip and esp values had a lot of issues and was causing the first wave of page faults. This was due to us having our pids increment incorrectly which led to us being a pid ahead when calculating the eip value.

Bug: Second wave of pagefaults with execute. 
Fix: Our tss seemed to have the right value but was only working when we hard coded it to the pid - 0 case so when we ran something after it would fault as soon as it hit the asm volatile. We ended up finding out that this was due to the pids being incorrectly mapped as they got to the next one 

Bug: general protection fault when hitting the asm volatile
Fix: this was due to an issue with our idt. While we did set the dpl bit to 0 in syscall cases (0x80) we did not set the reserved three bit to 1. While other people and a ca did not we expect there was something in our handler or assembly linkage that was different that caused us to need to do this.

Bug: Our RTC.c file functions were all functioning properly for earlier checkpoints. However, with cp4, it wouldn't work with void because we weren't properly dereferencing the value of the variable "frequency" in the RTC_Write function. 
Fix: We were initially extracting the value by simply setting frequency = (int32_t) buf. We changed it to frequency = *((int32_t*)buf). The difference is that in the first method, we simply cast the buffer pointer to a 32-bit int type variable. This fails to truly read data from memory. With the second method, we cast the buffer pointer to another pointer, of 32-bit int type. Then we dereference this second new pointer to read the value at the memory location it points to. 

Bug: Our halt function was giving us a lot of trouble, even after we had successfully written and debugged the rest of the execute and syscall functions. 
Fix: The final fix was that we were using incorrect page sizes. We were supposed to be using 4 MB size pages, but were instead using 4 KB size pages. After making this change, our halt functioned as it was supposed to. 

Bug: The pingpong function had an extra line in the output
Fix: We traced back the root issue to be in the lib.c file, with the putc function. We were checking screen_x == NUM_COLS - 1, when it should be screen_x == NUM_COLS. After making this fix of boundary condition, our pingpong function worked. 

Bug: Unique faults with every syscall when calling halt
Fix: when we ran programs and it halted it would halt but would have a different fault for each of our functions. This ended up being an issue with TSS.ESP0 somehow, initialy we thought we could just push the value to the struct in the execute function then just access the value again in halt but that caused the issue. We assumed that there was some way that the value was being manipulated likely by these syscalls since it was a unique fault. We ended up putting back the same calculation for tss.esp0 from execute into our halt function. 

Bug: Fail for syserr 4 & not printing file not found for invalid arguments
Fix: This function was a call to open and we originally implemented it without having it return -1 in cases it could not find the file or the file did not exist. This led to it always pass a real value which made it skip the if statements in the cat and syserr files. We ended up adding an extra if statement that checks if the value is -1 after an open call and in that case it returns invalid but for all other cases it return the fd instead of the output of the open call

Bug: Fail for syserr 5 
Fix: this was a testcase where it checked if close was outputting the right value. Turned out our bounds for our error checking were just incorrect so if a file was not open or if it was a file such as stdin on stdout that should be able to close it would end up saying that it could close and marking the item as free to be used later when that was incorrect
